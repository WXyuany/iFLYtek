// Generated by gencpp from file xf_mic_api/Get_Wav_List_srvResponse.msg
// DO NOT EDIT!


#ifndef XF_MIC_API_MESSAGE_GET_WAV_LIST_SRVRESPONSE_H
#define XF_MIC_API_MESSAGE_GET_WAV_LIST_SRVRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace xf_mic_api
{
template <class ContainerAllocator>
struct Get_Wav_List_srvResponse_
{
  typedef Get_Wav_List_srvResponse_<ContainerAllocator> Type;

  Get_Wav_List_srvResponse_()
    : result()
    , fail_reason()
    , number(0)
    , wav_list()  {
    }
  Get_Wav_List_srvResponse_(const ContainerAllocator& _alloc)
    : result(_alloc)
    , fail_reason(_alloc)
    , number(0)
    , wav_list(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _result_type;
  _result_type result;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _fail_reason_type;
  _fail_reason_type fail_reason;

   typedef int8_t _number_type;
  _number_type number;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _wav_list_type;
  _wav_list_type wav_list;





  typedef boost::shared_ptr< ::xf_mic_api::Get_Wav_List_srvResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::xf_mic_api::Get_Wav_List_srvResponse_<ContainerAllocator> const> ConstPtr;

}; // struct Get_Wav_List_srvResponse_

typedef ::xf_mic_api::Get_Wav_List_srvResponse_<std::allocator<void> > Get_Wav_List_srvResponse;

typedef boost::shared_ptr< ::xf_mic_api::Get_Wav_List_srvResponse > Get_Wav_List_srvResponsePtr;
typedef boost::shared_ptr< ::xf_mic_api::Get_Wav_List_srvResponse const> Get_Wav_List_srvResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::xf_mic_api::Get_Wav_List_srvResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::xf_mic_api::Get_Wav_List_srvResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::xf_mic_api::Get_Wav_List_srvResponse_<ContainerAllocator1> & lhs, const ::xf_mic_api::Get_Wav_List_srvResponse_<ContainerAllocator2> & rhs)
{
  return lhs.result == rhs.result &&
    lhs.fail_reason == rhs.fail_reason &&
    lhs.number == rhs.number &&
    lhs.wav_list == rhs.wav_list;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::xf_mic_api::Get_Wav_List_srvResponse_<ContainerAllocator1> & lhs, const ::xf_mic_api::Get_Wav_List_srvResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace xf_mic_api

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::xf_mic_api::Get_Wav_List_srvResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::xf_mic_api::Get_Wav_List_srvResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::xf_mic_api::Get_Wav_List_srvResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::xf_mic_api::Get_Wav_List_srvResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xf_mic_api::Get_Wav_List_srvResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xf_mic_api::Get_Wav_List_srvResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::xf_mic_api::Get_Wav_List_srvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c793d8332417dd7a757cd073c90cd762";
  }

  static const char* value(const ::xf_mic_api::Get_Wav_List_srvResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc793d8332417dd7aULL;
  static const uint64_t static_value2 = 0x757cd073c90cd762ULL;
};

template<class ContainerAllocator>
struct DataType< ::xf_mic_api::Get_Wav_List_srvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "xf_mic_api/Get_Wav_List_srvResponse";
  }

  static const char* value(const ::xf_mic_api::Get_Wav_List_srvResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::xf_mic_api::Get_Wav_List_srvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string result\n"
"string fail_reason\n"
"int8 number\n"
"string[] wav_list\n"
"\n"
;
  }

  static const char* value(const ::xf_mic_api::Get_Wav_List_srvResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::xf_mic_api::Get_Wav_List_srvResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.result);
      stream.next(m.fail_reason);
      stream.next(m.number);
      stream.next(m.wav_list);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Get_Wav_List_srvResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::xf_mic_api::Get_Wav_List_srvResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::xf_mic_api::Get_Wav_List_srvResponse_<ContainerAllocator>& v)
  {
    s << indent << "result: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.result);
    s << indent << "fail_reason: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.fail_reason);
    s << indent << "number: ";
    Printer<int8_t>::stream(s, indent + "  ", v.number);
    s << indent << "wav_list[]" << std::endl;
    for (size_t i = 0; i < v.wav_list.size(); ++i)
    {
      s << indent << "  wav_list[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.wav_list[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // XF_MIC_API_MESSAGE_GET_WAV_LIST_SRVRESPONSE_H
